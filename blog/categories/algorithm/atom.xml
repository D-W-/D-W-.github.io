<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | D W]]></title>
  <link href="http://d-w-.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://d-w-.github.io/"/>
  <updated>2015-10-10T21:33:10+08:00</updated>
  <id>http://d-w-.github.io/</id>
  <author>
    <name><![CDATA[Harry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[最短路径问题]]></title>
    <link href="http://d-w-.github.io/blog/2015/10/10/zui-duan-lu-jing-wen-ti/"/>
    <updated>2015-10-10T20:21:35+08:00</updated>
    <id>http://d-w-.github.io/blog/2015/10/10/zui-duan-lu-jing-wen-ti</id>
    <content type="html"><![CDATA[<p>这是一篇一直想写的总结. 主要是复习的时候详细复习(这里应该说是学习了..)了一下最短路径问题. 发现当年学的还有很多不足.. 很多算法没学过,学过的算法的局限性我也不知道.</p>

<p>就像当年数据结构上机,练习dijkstra算法,虽然我自己敲了出来,但是学长问我这个能不能处理负权边的问题的时候我还是不知道..</p>

<p>这里就以负权边为索引详细说一下几个最短路径算法..</p>

<h2>1. Dijkstra算法</h2>

<p>这个应该比较熟悉了,所有的涉及到最短路径的问题都会提到这个算法.
算法原理是贪心
解决单源最短路径问题</p>

<p>先选择一个源点,也就是路径的起点.
然后重复 k 轮,每一轮添加一个点到目前生成的树里面,所以 k 是除源点外节点的数目
每一轮中分为两步</p>

<ol>
<li><strong>选择</strong> : 选择源点到达距离最短的点当做下一个加入生成树里面的点</li>
<li><strong>更新</strong> : 由刚刚选择的点更新源点到每个点的距离</li>
</ol>


<p>其中.选择这一步跟时间复杂度有点关系</p>

<ol>
<li>比较朴素的方法,既然要选最小的,那就<strong>遍历</strong>一遍

<ul>
<li>这种方法在图比较稠密的时候比较好用,时间复杂度为:</li>
</ul>
</li>
<li>既然要找最小的,建一个<strong>最小堆</strong>就可以了,这样时间复杂度<strong>好像</strong>比较低

<ul>
<li>实际上这样做的话比较复杂,时间复杂度也不一定低.</li>
<li>复杂点 1 在堆里面要存一对元素(pair),因为我们需要距离这个值来进行比较,维护这个堆,还需要最小的距离对应的节点的编号,因为后面我们需要找到这个节点进行更新</li>
<li>复杂点 2 在于这个堆不是一成不变的,而需要<strong>更新</strong>,每次更新的时候都涉及堆结构的变化,会带来额外的复杂度</li>
<li>这种方法在图比较稀疏的时候比较好用,时间复杂度为:</li>
</ul>
</li>
</ol>


<p>最后,这个算法没有办法解决负权边的问题
因为上文提到,这个算法逐步生成一棵树的,而每一步新生成的节点都代表了源点到它的最短路径.
如果有负权边的话,上面那句话就无法保证,有可能会出现后面的一条负权边导致前面已经生成完毕的树里面的某个点遭到破坏</p>

<h2>2. Bellman-Ford算法</h2>

<p>这个算法有改进,权值可以为负</p>

<p>dist k[u] 代表最多经过 k 条边,源点到 u 的最短距离</p>

<p>dist n[u] 就是源点到 u 的最短距离, n 为顶点数(因为最短路径边数目小于顶点数,没有负权环)</p>

<p>可以得到推导式</p>

<pre><code>dist k[u] = min{dist k-1[u], min{dist k-1[j] + E[j][u] } }
</code></pre>

<p>由源点最多经过 k 条边,到 u 的最短距离是 { 最多经过 k-1 条边的最短距离 } 和  { 最多经过 k-1 条边到某个边的最短距离加上这个边到 u 的距离 }里面更小的那个</p>

<p>伪代码如下</p>

<pre><code>    for(k = 2 : n)
        for(u = 0 : n)
            for(i = 0:n)
                if(E[i][u] &gt; 0 &amp;&amp; dist[u] &gt; E[i][u] + dist[i])
                    dist[u] = E[i][u] + dist[i]
</code></pre>

<p>上面提到了,这个算法不允许图中有负权环
因为出现了负权环,就不存在最短路径问题了,一直在负权环上面循环可以使路径趋近于无穷小..</p>

<h2>3.发现负权环</h2>

<p>上面提到了负权环,如何判断图中有没有负权环呢?</p>

<p>先看看如何发现环
可以进行一波深度优先搜索,如果发现搜索的过程中搜索到了已经搜到了的元素,就有环
或者进行一下拓扑排序,如果运行到最后还有元素,就能判断有环</p>

<p>由于和题目不太相关,这里先不多说了</p>

<h2>4.Floyd算法</h2>

<p>上面说了单源最短路径的算法,这里说一个多源的,就是求出整个图上每两点之间的最短路径</p>

<p>A ij[k] 代表从 i 到 j ,中转点序号小于等于 k 的最短路径</p>

<p>A ij[n] 就是从 i 到 j 的最短路径, n 为节点的数目,也就是节点序号的最大值</p>

<p>可以得到推导式</p>

<pre><code>A ij[k] = min{ A ij[k-1] , A ik[k-1] + A kj[k-1]}
</code></pre>

<p>从 i 到 j ,中转点序号小于等于 k 的最短路径等于 { 中转点序号小于 k-1 的最短路径 } 和 { 中转点序号最大为 k 的最短路径(中转点包含k) }里面最小的一个</p>

<hr />

<p>总结结束..
今天看到了一个有趣的单词
redraw re-draw 重画
我一开始看成了 red-raw 红红的原始的..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Morris Traversal]]></title>
    <link href="http://d-w-.github.io/blog/2015/03/22/Morris-Traversal/"/>
    <updated>2015-03-22T00:00:00+08:00</updated>
    <id>http://d-w-.github.io/blog/2015/03/22/Morris-Traversal</id>
    <content type="html"><![CDATA[<p>Morris Traversal 是深度优先遍历二叉树的一种方法,空间复杂度只要O(1),时间复杂度也只有O(n)
这里根据<a href="http://www.cnblogs.com/AnnieKim/archive/2013/06/15/MorrisTraversal.html">博客园上的文章</a>进行了学习.整个算法我感觉主要有两部分不太容易懂 ,一是具体的算法部分,也就是如何利用线索二叉树找前驱节点的方法的;另一个就是如何证明这个算法是O(n)的.对于第一部分可以在代码里面说明,这里先说一下第二部分,借用原文中的话:</p>

<blockquote><p>直觉上，认为它的复杂度是O(nlgn)，因为找单个节点的前驱节点与树的高度有关。但事实上，寻找所有节点的前驱节点只需要O(n)时间。n个节点的二叉树中一共有n-1条边，整个过程中每条边<strong>最多只走2次</strong>，一次是为了定位到某个节点，另一次是为了寻找上面某个节点的前驱节点，如下图所示，其中红色是为了定位到某个节点，黑色线是为了找到前驱节点。所以复杂度为O(n)。
<img src="http://images.cnitblog.com/blog/300640/201306/15150628-5285f29bab234750a62e2309394b6e14.jpg" alt="此处输入图片的描述" /></p></blockquote>

<p>原文在这里讲的已经很详细了,这里补充一点,我感觉每条边并不是最多只会被走两次,而是最多会走3次,因为找前驱结点的话会走两次,a:第一次遍历到该节点,找到它的前驱节点,并把前驱节点的右孩子设为当前节点;b:第二次遍历到该节点,找到它的前驱结点,这时前驱结点的右孩子是当前节点(形成了一个环),这时把前驱结点恢复成NULL,并设置当前孩子的右孩子为当前节点.</p>

<p>这里我用python实现了一下<strong>中序遍历</strong></p>

<pre><code>#!/usr/bin/env python
#coding:utf-8

# Morris traversal
# O(1) space O(n) time

# 算法基本思想:类似于线索二叉树,找到每个节点的前驱节点,并用前驱节点的右孩子指向当前节点,最后再把该指针删除

'''算法步骤
1. 如果当前节点的左孩子为空，则输出当前节点并将其右孩子作为当前节点。

2. 如果当前节点的左孩子不为空，在当前节点的左子树中找到当前节点在中序遍历下的前驱节点。

   a) 如果前驱节点的右孩子为空，将它的右孩子设置为当前节点。当前节点更新为当前节点的左孩子。

   b) 如果前驱节点的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状）。输出当前节点。当前节点更新为当前节点的右孩子。

3. 重复以上1、2直到当前节点为空。
'''

# 二叉树
class TreeNode:
    def __init__(self,x):
        self.val = x
        self.left = None
        self.right = None

class MorrisTraversal:
    '只是一个封装类,把各种遍历封装起来'
    @staticmethod
    def inOrder(root):
        now = root
        while now:
            if now.left == None:
                print now.val
                now = now.right
            else:
                pre = now.left
                # 寻找前驱,当第二次寻找now的时候now的前驱的right已经被设定成了now,也就是成了一个环,要注意,这里用 pre.right != now 来避免
                # 左边的最右就是前驱
                while pre.right and pre.right != now:
                    pre = pre.right
                if pre.right == now:
                    pre.right = None
                    print now.val
                    now = now.right
                else:
                    pre.right = now
                    now = now.left

if __name__ == '__main__':
    t1 = TreeNode(1)
    t2 = TreeNode(2)
    t3 = TreeNode(3)
    t4 = TreeNode(4)
    t5 = TreeNode(5)
    t6 = TreeNode(6)
    t7 = TreeNode(7)

    t1.left = t2
    t1.right = t3
    t2.left = t4
    t2.right = t5
    t3.left = t6
    t3.right = t7

    MorrisTraversal.inOrder(t1)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode上面的Distinct Subsequences总结]]></title>
    <link href="http://d-w-.github.io/blog/2014/12/20/Distinct-Subsequences/"/>
    <updated>2014-12-20T00:00:00+08:00</updated>
    <id>http://d-w-.github.io/blog/2014/12/20/Distinct-Subsequences</id>
    <content type="html"><![CDATA[<p>最近做了挺多东西,从中也学了不少,觉得总结一下比较好,一直没有时间就一直拖着,现在终于有点空闲的时间,觉得像我这种记性不太好的人还是多做一些code review,否则做一点忘一点,最后反而学不到什么东西.</p>

<h2>0.先在这里记录一下要整理的东西</h2>

<p>1.模拟登陆与抓包(以模拟登陆新浪微博为主,还包括一些编码加密方式)
2.简易python框架的使用和编写(参照<a href="http://www.liaoxuefeng.com/">廖雪峰的博客</a>)
3.cookie和session的区别
4.支持向量机学习笔记
5.图片分类算法(图像处理课堂作业总结)
6.一些在LeetCode上面做过的题目的总结</p>

<p>还是先回归正题,以后有空了再把那几个坑填上..
先总结一下今天做的这道题,LeetCode上面的<a href="https://oj.leetcode.com/problems/distinct-subsequences/">Distinct Subsequences</a></p>

<h2>1.题目描述</h2>

<p>首先这道题题目描述不是很容易理解,我看了半天还是没明白题意,可能是英语水平有限.这里重新描述一下这道题</p>

<p>给两个字符串S,T 要求在S中找子串(subsequence),使S的子串等于T,在S中找到最多的这样的子串个数</p>

<h2>2.解题思路</h2>

<p>这道题很明显是一道DP,作为一个初学者,我首先想到了最长公共子串</p>

<pre><code>    if(s1[i] == s2[i])
        dp[i][j] = dp[i-1][j-1]+1;
    else
        dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
</code></pre>

<p>可惜和这题没什么关系
DP很重要的是观察前后元素的关系,在这道题目中,如果用M*N的space来存储计算结果,其中<strong>dp[i][j]</strong>代表了<strong>T[0,i]</strong>中包含的等于<strong>T[0,j]</strong>的子串的数目.
重点就是得到<strong>dp[i][j]</strong>和前面的值之间的关系,我就先画了一张二维数组的表
r a b b b i t
0 0 0 0 0 0 0 0
r 0 1 1 1 1 1 1 1
a 0 0 1 1 1 1 1 1
b 0 0 0 1 2 3 3 3
b 0 0 0 0 1 3 3 3
i 0 0 0 0 0 0 3 1
t 0 0 0 0 0 0 0 3
表中的数值都是人工计算出来的,这里的重点是<strong>b重复了3次的那个地方</strong>,再找个重复多次的例子看了一下,发现了规律,(对于一个初学者直接写出递推式实在太困难,这样找规律的方法更容易理解一些)</p>

<pre><code>    if(s[i] == t[j])
        dp[i][j] = dp[i][j-1]+dp[i-1][j-1];
    else
        dp[i][j] = dp[i][j-1];
</code></pre>

<p>这些代码的<strong>数学解释</strong>就是:
当s[i]和t[j]匹配的时候
对应的值就是以s[i]结尾的子串的个数和不以s[i]结尾的子串的个数的和
例如rabb<strong>b</strong> 和 rab<strong>b</strong>匹配到最后一个b的时候,对应的值就是rabbb中以最后一个b结尾的还要和<strong>rab</strong>相等的子串的个数为2(123,124),不以最后一个b结尾的还要和<strong>rabb</strong>相等的子串的个数为1(1234),总和就是3,具体可以再用rabbbbbb和rabb匹配实验一下&hellip;
当不匹配的时候
直接等于上一个就好了..</p>

<h2>3.代码实现</h2>

<pre><code>    class Solution {
    public:
        int numDistinct(string S, string T) {
            //DP
            /*dp[i][j] stores  number of S[0,i]'s substr which equals T[0,j]*/
            int **dp = new int*[T.length()+1];
            for (int i = 0; i &lt;= T.length(); ++i){
                dp[i] = new int[S.length()+1];
                memset(dp[i], 0, sizeof(int)*S.length());
            }
            for (int i = 0; i &lt;= S.length(); ++i)
                dp[0][i] = 1;
            bool flag = false;
            int next = 0;
            for (int i = 0; i &lt; T.length(); ++i){
                for (int j = next; j &lt; S.length(); ++j){
                    if (S[j] == T[i]){
                        dp[i + 1][j + 1] = dp[i][j] + dp[i + 1][j];
                        if (!flag){
                            flag = true;
                            next = j + 1;
                        }
                    }
                    else
                        dp[i + 1][j + 1] = dp[i + 1][j];
                }
                flag = false;
            }
            return dp[T.length()][S.length()];
        }
    };
</code></pre>

<h2>3.代码优化</h2>

<p>0.我的代码一开始有一个比较大的问题,就是没对数组初始化..后来进行了修改</p>

<ol>
<li><p>内层循环的开始不必是0,这点我已经在实现的时候优化,
比如rabbbit和rabbit匹配的时候匹配到了t的时候,只要从(rabbit中的)i的下一个开始匹配就可以了,因为要匹配t,必须在前面所有字符已经匹配结束的基础上匹配t</p></li>
<li><p>比较重要的一个优化,leetcode论坛上面一个大牛的优化,将空间复杂度降到了O(n)</p></li>
</ol>


<p>具体是这样的</p>

<pre><code>    vector&lt;int&gt; path(m+1, 0);
    path[0] = 1;            // initial condition

    for (int j = 1; j &lt;= n; j++) {
        // traversing backwards so we are using path[i-1] from last time step
        for (int i = m; i &gt;= 1; i--) {
            path[i] = path[i] + (T[i-1] == S[j-1] ? path[i-1] : 0);
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode上面的WordLadder总结]]></title>
    <link href="http://d-w-.github.io/blog/2014/11/25/Word-Ladder/"/>
    <updated>2014-11-25T00:00:00+08:00</updated>
    <id>http://d-w-.github.io/blog/2014/11/25/Word-Ladder</id>
    <content type="html"><![CDATA[<p>按通过率来说,WordLadder应该是Leetcode上面最难的一道题了
其中的第二道我提交了8次才成功,多数原因是TLE,这实在令人沮丧</p>

<p>在此应该总结一下,强化自己的答题技巧</p>

<p><em>题目描述</em> :通过每次改变单词的一个字母,找到一个单词到另一个单词的最短通路</p>

<ol>
<li>核心算法BFS
 因为题目要求最短的路径,BFS将所有的结点分层,找到结尾单词(end)最先出现的
 层就是最短的路径</li>
<li>BFS分层
 BFS分层的方法有两种

<ol>
<li>在队列中插入分隔符, 每当取出一个分隔符的时候就在队列尾插入一个分隔符两个分隔符之间的结点都处于同一层</li>
<li>记录已经查找过的元素的层号, 找到合适的子结点的时候就把子结点的层号设为父节点的层号加1</li>
</ol>
</li>
<li>记录路径的方向, 防止无限循环
 防止 hot找到了dot, dot又找到了hot 这种无限循环问题

<ol>
<li>找到合适的子结点就把它在集合里面删掉因为当时考虑到如果一个字符串出现了一次,它的下一次出现肯定会比这一次出现造成的wordladder长(因为广度优先遍历,后面出现的元素层数大于等于前面出现的元素的层数)</li>
<li>找到了合适的子结点就标记一下, 增加一个查找标记数组的步骤
这两种方法有一个bug,详见第四条</li>
</ol>
</li>
<li>3中解决方法的bug 两个不同的结点有相同的后继(1中第一次出现就会把后继删掉了,2中第一次出现就把后继标记过了)

<ol>
<li>3.1的补救办法,将删除子结点的过程延迟到每一层结束的时候,每一层结束的时候统一在dict里面删除该层所有的子结点</li>
<li>将2.2和3.2结合,同时记录查找过的元素的内容和层号,存到一个unordered_map里面,找到合适的元素的时候看一下map里面是否存在了,如果存在了的话再比较层号,层号相同则新找到的路径也是合理的路径,记录下来</li>
</ol>
</li>
<li>WordLadderII要求记录所有最短路径,如何保存最短路径

<ol>
<li>BFS的时候一边找一边存,具体做法建立一个和BFS队列操作相同的队列,存储myqueue中当前元素所在的vector</li>
<li>BFS的过程中记录下每一条通路的边,保存起来,BFS结束之后再跑一遍DFS,通过DFS的递归可以轻易得到结果集</li>
</ol>
</li>
<li>5.2的优化,将所有通路的边倒序存储,DFS倒序遍历,可以砍掉很多不必要的结点(比如从start开始结果并不是end的那些边)</li>
</ol>

]]></content>
  </entry>
  
</feed>
