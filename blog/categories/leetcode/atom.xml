<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Leetcode | D W]]></title>
  <link href="http://d-w-.github.io/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://d-w-.github.io/"/>
  <updated>2015-08-19T16:25:10+08:00</updated>
  <id>http://d-w-.github.io/</id>
  <author>
    <name><![CDATA[Harry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LeetCode上面的Distinct Subsequences总结]]></title>
    <link href="http://d-w-.github.io/blog/2014/12/20/Distinct-Subsequences/"/>
    <updated>2014-12-20T00:00:00+08:00</updated>
    <id>http://d-w-.github.io/blog/2014/12/20/Distinct-Subsequences</id>
    <content type="html"><![CDATA[<p>最近做了挺多东西,从中也学了不少,觉得总结一下比较好,一直没有时间就一直拖着,现在终于有点空闲的时间,觉得像我这种记性不太好的人还是多做一些code review,否则做一点忘一点,最后反而学不到什么东西.</p>

<h2>0.先在这里记录一下要整理的东西</h2>

<p>1.模拟登陆与抓包(以模拟登陆新浪微博为主,还包括一些编码加密方式)
2.简易python框架的使用和编写(参照<a href="http://www.liaoxuefeng.com/">廖雪峰的博客</a>)
3.cookie和session的区别
4.支持向量机学习笔记
5.图片分类算法(图像处理课堂作业总结)
6.一些在LeetCode上面做过的题目的总结</p>

<p>还是先回归正题,以后有空了再把那几个坑填上..
先总结一下今天做的这道题,LeetCode上面的<a href="https://oj.leetcode.com/problems/distinct-subsequences/">Distinct Subsequences</a></p>

<h2>1.题目描述</h2>

<p>首先这道题题目描述不是很容易理解,我看了半天还是没明白题意,可能是英语水平有限.这里重新描述一下这道题</p>

<p>给两个字符串S,T 要求在S中找子串(subsequence),使S的子串等于T,在S中找到最多的这样的子串个数</p>

<h2>2.解题思路</h2>

<p>这道题很明显是一道DP,作为一个初学者,我首先想到了最长公共子串</p>

<pre><code>    if(s1[i] == s2[i])
        dp[i][j] = dp[i-1][j-1]+1;
    else
        dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
</code></pre>

<p>可惜和这题没什么关系
DP很重要的是观察前后元素的关系,在这道题目中,如果用M*N的space来存储计算结果,其中<strong>dp[i][j]</strong>代表了<strong>T[0,i]</strong>中包含的等于<strong>T[0,j]</strong>的子串的数目.
重点就是得到<strong>dp[i][j]</strong>和前面的值之间的关系,我就先画了一张二维数组的表
r a b b b i t
0 0 0 0 0 0 0 0
r 0 1 1 1 1 1 1 1
a 0 0 1 1 1 1 1 1
b 0 0 0 1 2 3 3 3
b 0 0 0 0 1 3 3 3
i 0 0 0 0 0 0 3 1
t 0 0 0 0 0 0 0 3
表中的数值都是人工计算出来的,这里的重点是<strong>b重复了3次的那个地方</strong>,再找个重复多次的例子看了一下,发现了规律,(对于一个初学者直接写出递推式实在太困难,这样找规律的方法更容易理解一些)</p>

<pre><code>    if(s[i] == t[j])
        dp[i][j] = dp[i][j-1]+dp[i-1][j-1];
    else
        dp[i][j] = dp[i][j-1];
</code></pre>

<p>这些代码的<strong>数学解释</strong>就是:
当s[i]和t[j]匹配的时候
对应的值就是以s[i]结尾的子串的个数和不以s[i]结尾的子串的个数的和
例如rabb<strong>b</strong> 和 rab<strong>b</strong>匹配到最后一个b的时候,对应的值就是rabbb中以最后一个b结尾的还要和<strong>rab</strong>相等的子串的个数为2(123,124),不以最后一个b结尾的还要和<strong>rabb</strong>相等的子串的个数为1(1234),总和就是3,具体可以再用rabbbbbb和rabb匹配实验一下&hellip;
当不匹配的时候
直接等于上一个就好了..</p>

<h2>3.代码实现</h2>

<pre><code>    class Solution {
    public:
        int numDistinct(string S, string T) {
            //DP
            /*dp[i][j] stores  number of S[0,i]'s substr which equals T[0,j]*/
            int **dp = new int*[T.length()+1];
            for (int i = 0; i &lt;= T.length(); ++i){
                dp[i] = new int[S.length()+1];
                memset(dp[i], 0, sizeof(int)*S.length());
            }
            for (int i = 0; i &lt;= S.length(); ++i)
                dp[0][i] = 1;
            bool flag = false;
            int next = 0;
            for (int i = 0; i &lt; T.length(); ++i){
                for (int j = next; j &lt; S.length(); ++j){
                    if (S[j] == T[i]){
                        dp[i + 1][j + 1] = dp[i][j] + dp[i + 1][j];
                        if (!flag){
                            flag = true;
                            next = j + 1;
                        }
                    }
                    else
                        dp[i + 1][j + 1] = dp[i + 1][j];
                }
                flag = false;
            }
            return dp[T.length()][S.length()];
        }
    };
</code></pre>

<h2>3.代码优化</h2>

<p>0.我的代码一开始有一个比较大的问题,就是没对数组初始化..后来进行了修改</p>

<ol>
<li><p>内层循环的开始不必是0,这点我已经在实现的时候优化,
比如rabbbit和rabbit匹配的时候匹配到了t的时候,只要从(rabbit中的)i的下一个开始匹配就可以了,因为要匹配t,必须在前面所有字符已经匹配结束的基础上匹配t</p></li>
<li><p>比较重要的一个优化,leetcode论坛上面一个大牛的优化,将空间复杂度降到了O(n)</p></li>
</ol>


<p>具体是这样的</p>

<pre><code>    vector&lt;int&gt; path(m+1, 0);
    path[0] = 1;            // initial condition

    for (int j = 1; j &lt;= n; j++) {
        // traversing backwards so we are using path[i-1] from last time step
        for (int i = m; i &gt;= 1; i--) {
            path[i] = path[i] + (T[i-1] == S[j-1] ? path[i-1] : 0);
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode上面的WordLadder总结]]></title>
    <link href="http://d-w-.github.io/blog/2014/11/25/Word-Ladder/"/>
    <updated>2014-11-25T00:00:00+08:00</updated>
    <id>http://d-w-.github.io/blog/2014/11/25/Word-Ladder</id>
    <content type="html"><![CDATA[<p>按通过率来说,WordLadder应该是Leetcode上面最难的一道题了
其中的第二道我提交了8次才成功,多数原因是TLE,这实在令人沮丧</p>

<p>在此应该总结一下,强化自己的答题技巧</p>

<p><em>题目描述</em> :通过每次改变单词的一个字母,找到一个单词到另一个单词的最短通路</p>

<ol>
<li>核心算法BFS
 因为题目要求最短的路径,BFS将所有的结点分层,找到结尾单词(end)最先出现的
 层就是最短的路径</li>
<li>BFS分层
 BFS分层的方法有两种

<ol>
<li>在队列中插入分隔符, 每当取出一个分隔符的时候就在队列尾插入一个分隔符两个分隔符之间的结点都处于同一层</li>
<li>记录已经查找过的元素的层号, 找到合适的子结点的时候就把子结点的层号设为父节点的层号加1</li>
</ol>
</li>
<li>记录路径的方向, 防止无限循环
 防止 hot找到了dot, dot又找到了hot 这种无限循环问题

<ol>
<li>找到合适的子结点就把它在集合里面删掉因为当时考虑到如果一个字符串出现了一次,它的下一次出现肯定会比这一次出现造成的wordladder长(因为广度优先遍历,后面出现的元素层数大于等于前面出现的元素的层数)</li>
<li>找到了合适的子结点就标记一下, 增加一个查找标记数组的步骤
这两种方法有一个bug,详见第四条</li>
</ol>
</li>
<li>3中解决方法的bug 两个不同的结点有相同的后继(1中第一次出现就会把后继删掉了,2中第一次出现就把后继标记过了)

<ol>
<li>3.1的补救办法,将删除子结点的过程延迟到每一层结束的时候,每一层结束的时候统一在dict里面删除该层所有的子结点</li>
<li>将2.2和3.2结合,同时记录查找过的元素的内容和层号,存到一个unordered_map里面,找到合适的元素的时候看一下map里面是否存在了,如果存在了的话再比较层号,层号相同则新找到的路径也是合理的路径,记录下来</li>
</ol>
</li>
<li>WordLadderII要求记录所有最短路径,如何保存最短路径

<ol>
<li>BFS的时候一边找一边存,具体做法建立一个和BFS队列操作相同的队列,存储myqueue中当前元素所在的vector</li>
<li>BFS的过程中记录下每一条通路的边,保存起来,BFS结束之后再跑一遍DFS,通过DFS的递归可以轻易得到结果集</li>
</ol>
</li>
<li>5.2的优化,将所有通路的边倒序存储,DFS倒序遍历,可以砍掉很多不必要的结点(比如从start开始结果并不是end的那些边)</li>
</ol>

]]></content>
  </entry>
  
</feed>
