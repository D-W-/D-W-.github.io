<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Review | D W]]></title>
  <link href="http://d-w-.github.io/blog/categories/review/atom.xml" rel="self"/>
  <link href="http://d-w-.github.io/"/>
  <updated>2015-10-10T21:33:10+08:00</updated>
  <id>http://d-w-.github.io/</id>
  <author>
    <name><![CDATA[Harry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Monster Storm]]></title>
    <link href="http://d-w-.github.io/blog/2015/03/25/Monster-Storm/"/>
    <updated>2015-03-25T00:00:00+08:00</updated>
    <id>http://d-w-.github.io/blog/2015/03/25/Monster-Storm</id>
    <content type="html"><![CDATA[<p>Monster Storm</p>

<p>边学边写的cocos2d-x游戏,基于3.0版本</p>

<p>这个游戏的主要难点有两个
1. 怎么把所有需要消除的精灵摆对位置
2. 怎么找到某个精灵周围的同类精灵</p>

<h2>摆放精灵</h2>

<ol>
<li>找到精灵摆放点的左下角的(x,y)坐标,这里直接借用<a href="http://www.tairan.com/archives/5929">泰然网教程上说的</a></li>
</ol>


<blockquote><p><img src="/images/1.png"></p></blockquote>

<p>m_matrixLeftBottomX的值 ＝ （ 屏幕的宽 － 寿司的宽＊N个寿司 － （ N-1 ）＊寿司之间的间隙） ／ 2。</p>

<ol>
<li>从下到上,从左到右遍历整个matrix,为每个精灵编号,例如,左下角的精灵行号0,列号0……这样每个精灵都有了一个坐标,而每个坐标对应了屏幕上的一个位置,只需要根据左下角的坐标加加减减就可以得到某个坐标对应的具体位置,这样就建立了坐标和精灵,坐标和图上的位置分别以一对应的关系.</li>
<li>有了上面一一对应的关系,只要在对应位置的上空XX米创建出来精灵,并把它移到对应位置就可以了</li>
</ol>


<h2>查找并消除精灵</h2>

<ol>
<li>定位到用户点击的精灵,想完成消灭小星星的消除,首先要知道用户点了那个精灵,这里我当时写的算法很low,是先获取用户点击的坐标,然后遍历整个精灵matrix,看一下哪个精灵所在的square包含了那个坐标就是点击的坐标,当然,已经被消除了的精灵是不在那个matrix里面的;

<ul>
<li>比较好的一个做法应该是根据点击的坐标和左下角的距离关系直接找出对应的位置,然后检查该位置是否有精灵..</li>
</ul>
</li>
<li>定位完了就要找该精灵周边同类的精灵了,寻找过程类似于深度优先遍历,我是用递归写的,比如对于定位到的精灵,分别找它上下左右的精灵,如果上下左右的精灵是同类的话,就加入list,并更新上下左右的精灵为当前的精灵,继续递归查找上下左右.注意:查找的过程要注意重复,每次找到新的都要判断一下是否已经找过当前精灵..

<ul>
<li>当前另一个想法是类似于广度优先遍历,,用一个队列来维护,广度优先的好处是避免了递归</li>
</ul>
</li>
<li>然后要判断一下用户的第二次点击,点击的是不是第一次点的那个区域,判断的方法就是得到第二次点击的精灵(的地址),和已经存到list(第一次点击之后的所有同类精灵)里面的所有精灵进行比较,如果有相同的,则True,不是就False,清空list,blabla&hellip;</li>
<li>点击完了,也消除完了相应的精灵,要完成上面精灵的下落和精灵列的左移,这在<a href="http://www.tairan.com/archives/5929">泰然教程</a>上面说的很清楚</li>
</ol>


<blockquote><p><img src="/images/2.png"></p></blockquote>

<p>注意由于游戏不同,这里只有过程一,也就是不必填充,只让上面的下落:对于每一列从下到上查找空白数,等到了空白数大于0就说明精灵要下落了</p>

<blockquote><pre><code>  // 从下向上
    for (int row = 0; row &lt; m_height; row++) {
        sushi = m_matrix[row * m_width + col];
        if (NULL == sushi) {
            removedSushiOfCol++;
        } else {
            if (removedSushiOfCol &gt; 0) {
                //计算寿司精灵的新行数
                }
        }
    }
</code></pre></blockquote>

<p>让精灵列左移也是,从左到右,只要检查每列的第一个元素是否为NULL即可,然后整列左移</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review VCool Website]]></title>
    <link href="http://d-w-.github.io/blog/2015/03/23/Review_Vcool-Website/"/>
    <updated>2015-03-23T00:00:00+08:00</updated>
    <id>http://d-w-.github.io/blog/2015/03/23/Review_Vcool-Website</id>
    <content type="html"><![CDATA[<p>以前做过的一些东西的简单回顾，避免面试官问起来都忘了，也能在简历上面写得更加得心应手</p>

<h2>python web.py 网站</h2>

<p>接入新浪微博SDK，通过向新浪微博提供的接口(网址)发送GET请求(包含uid和code)得到json格式的返回数据</p>

<p>通过新浪SDK获取需要的信息的步骤</p>

<ol>
<li>用户登陆我的网站,点击新浪微博登陆,调到新浪的登陆页面,其中附带有GET的参数 <strong>redirect_uri</strong> ,用于下一步跳回我的网站</li>
<li>登陆成功返回我的网站,同时带有GET参数code&hellip;</li>
<li>我用code通过POST方法向新浪申请token,新浪返回一个json格式的数据,里面有token</li>
</ol>


<p>基本上面三个总结成一句话,我通过和新浪协商好的token向新浪指定的接口(网站)请求我想要的信息</p>

<p><strong>实际上,向新浪微博API请求微博等服务的时候只有<strong>access_token</strong>这一个参数是必须的,并不需要用户名等其他参数</strong></p>

<p>每次都让用户登录一下执行上面的步骤太麻烦,所以必须把token存起来,每次要用的时候直接通过token向接口请求就好了,token使用cookie保存,存在用户端,是我加密好了的值,我在数据库存另存一份用于比对,用户每次登录我就向用户的浏览器请求token(web.cookies().get()),解密之后得到里面的用户id和存好的token就可以向客户端请求了.</p>

<p>有了上面这些基础知识,就可以详细的理解整个网站的处理流程了</p>

<ol>
<li>用户访问VCool主页,由index这个类的GET()方法处理,首先向浏览器请求cookie,如果得到了cookie,直接跳到第3步,没有cookie,执行第2步</li>
<li>用户的浏览器并没有保存cookie,只能给他看主页,等他点击&#8221;通过新浪微博登陆&#8221;的按钮进行登录,等他在新浪端登陆完了,回来之后的处理是由callback类进行处理的(就是上面所说的给新浪登陆页面提供的 <strong>redirect_uri</strong> 填的是&#8217;<a href="http://1.vcoool.sinaapp.com/callback">http://1.vcoool.sinaapp.com/callback</a>&#8217;)</li>
<li>这种情况是用户的浏览器保存了cookie,按理说可以直接<code>raise web.seeother(\callback)</code>交给callback处理,因为callback是专门处理登陆后流程的类,但是这样的话会显示<strong>此网页包含重定向循环</strong>,我也不知道为啥..所以进行下列处理

<ol>
<li>通过在cookie里面解码出来的access_token构建一个请求对象</li>
<li>调用新浪微博API请求用户所关注用户的最新50条微博</li>
<li>对API返回的json格式数据处理(因为返回的东西有很多,我们只需要有限的信息比如微博内容,图片,作者等..)
4 .使用已经保存到数据库的SVM函数(在callback中已经保存,因为这里浏览器都存了cookie,所以之前肯定已经登录过了)计算得到分类的权值,并进行排序</li>
<li>字符串处理,因为新浪API返回的是raw字符串,@,##,和链接都不会显示,这里进行正则替换,把他们转换成HTML超链接形式</li>
<li>把排好序的微博列表通过<code>render.list()</code>方法传入前端模板</li>
</ol>
</li>
</ol>


<p>callback对象的功能</p>

<p>callback对象是对用户第一次登陆VCool进行处理,就像上面说的,用户在新浪的登陆页面登陆结束后就会redirect到这个函数来处理,同时会用GET方法附带一个code参数,用于我们请求access_token</p>

<ol>
<li>接收GET过来的code参数值,没有的话跳转到首页&#8221;/&#8221;</li>
<li>通过code向新浪请求参数access_token,expires_in,uid,分别是调用API时要用到的参数,过期时间,登录用户的新浪ID</li>
<li>根据上面得到的uid(新浪ID)查询一下数据库,如果已经有了相应的项的话就进行更新,如果没有的话就新建一个列表项</li>
<li>存cookie,把得到的access_token和expired_in等信息加密存一下cookie,以便下一次使用</li>
<li>后面的功能和3.2-3.6一样了</li>
</ol>


<p>当前数据库:
<code>
    data(weibo_id,reposts,comments,attitudes,text,pic_urls)
        用户喜欢的微博训练集(把用户评论过的微博当做训练集)
    dislike(weibo_id,reposts,comments,attitudes,text,pic_urls)
        用户不喜欢的微博训练集(把用户删除的微博当做训练集)
    func(weibo_id   a1  a2  a3  a4  a5  b)
        SVM得到的超平面公式
    user(weixin_id,weibo_id,access_token,expires_in)
        存储微博账号对应的微信号,连接微博api需要的access_token
</code></p>
]]></content>
  </entry>
  
</feed>
